import edu.uwm.cs351.Quicksort;
import java.util.Comparator;

import junit.framework.TestCase;

public class TestExhaustiveArray extends TestCase {
	private Quicksort<Integer> qsort;

	public void test1001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
	}

	public void test2001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
	}

	public void test2002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
	}

	public void test2003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
	}

	public void test3001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
	}

	public void test3002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
	}

	public void test3008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test3009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test3010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test3011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test3012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test3013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
	}

	public void test4001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
	}

	public void test4002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
	}

	public void test4028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
	}

	public void test4052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test4075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
	}

	public void test5001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
	}

	public void test5002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
	}

	public void test5172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
	}

	public void test5302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
	}

	public void test5422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test5541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
	}

	public void test6001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(1,a[5].intValue());
	}

	public void test6002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(1,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(1,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(1,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test6328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6542() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6543() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6544() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6545() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6546() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6547() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6548() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6549() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6550() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6551() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6552() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6553() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6554() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6555() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6556() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6557() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6558() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6559() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6560() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6561() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6562() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6563() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6564() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6565() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6566() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6567() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6568() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6569() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6570() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6571() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6572() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6573() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6574() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6575() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6576() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6577() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6578() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6579() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6580() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6581() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6582() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6583() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6584() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6585() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6586() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6587() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6588() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6589() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6590() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6591() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6592() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6593() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6594() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6595() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6596() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6597() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6598() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6599() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6600() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6601() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6602() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6603() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6604() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6605() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6606() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6607() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6608() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6609() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6610() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6611() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6612() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6613() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6614() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6615() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6616() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6617() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6618() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6619() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6620() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6621() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6622() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6623() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6624() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6625() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6626() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6627() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6628() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6629() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6630() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6631() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6632() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6633() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6634() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6635() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6636() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6637() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6638() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6639() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6640() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6641() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6642() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6643() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6644() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6645() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6646() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6647() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6648() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6649() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6650() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6651() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6652() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6653() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6654() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6655() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6656() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6657() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6658() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6659() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6660() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6661() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6662() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6663() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6664() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6665() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6666() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6667() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6668() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6669() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6670() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6671() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6672() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6673() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6674() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6675() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6676() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6677() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6678() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6679() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6680() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6681() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6682() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6683() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6684() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6685() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6686() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6687() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6688() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6689() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6690() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6691() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6692() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6693() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6694() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6695() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6696() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6697() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6698() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6699() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6700() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6701() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6702() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6703() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6704() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6705() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6706() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6707() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6708() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6709() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6710() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6711() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6712() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6713() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6714() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6715() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6716() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6717() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test6718() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6719() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6720() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6721() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6722() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6723() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6724() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6725() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6726() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6727() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6728() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6729() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6730() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6731() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6732() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6733() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6734() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6735() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6736() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6737() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6738() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6739() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6740() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6741() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6742() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6743() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6744() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6745() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6746() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6747() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6748() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6749() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6750() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6751() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6752() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6753() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6754() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6755() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6756() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6757() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6758() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6759() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6760() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6761() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6762() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6763() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6764() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6765() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6766() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6767() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6768() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6769() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6770() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6771() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6772() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6773() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6774() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6775() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6776() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6777() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6778() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6779() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6780() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6781() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6782() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6783() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6784() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6785() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6786() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6787() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6788() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6789() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6790() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6791() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6792() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6793() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6794() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6795() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6796() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6797() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6798() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6799() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6800() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6801() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6802() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6803() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6804() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6805() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6806() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6807() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6808() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6809() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6810() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6811() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6812() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6813() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6814() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6815() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6816() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6817() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6818() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6819() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6820() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6821() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6822() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6823() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6824() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6825() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6826() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6827() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6828() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6829() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6830() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6831() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6832() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6833() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6834() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6835() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6836() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6837() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6838() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6839() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6840() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6841() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6842() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6843() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6844() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6845() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6846() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6847() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6848() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6849() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6850() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6851() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6852() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6853() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6854() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6855() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6856() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6857() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6858() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6859() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6860() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6861() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6862() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6863() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6864() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6865() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6866() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6867() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6868() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6869() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6870() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6871() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6872() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6873() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6874() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6875() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6876() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6877() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6878() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6879() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6880() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6881() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6882() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6883() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6884() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6885() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6886() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6887() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6888() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6889() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6890() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6891() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6892() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6893() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6894() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6895() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6896() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6897() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6898() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6899() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6900() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6901() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6902() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6903() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6904() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6905() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6906() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6907() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6908() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6909() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6910() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6911() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6912() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6913() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6914() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6915() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6916() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6917() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6918() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6919() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6920() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6921() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6922() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6923() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6924() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6925() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6926() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6927() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6928() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6929() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6930() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6931() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6932() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6933() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6934() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6935() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6936() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6937() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6938() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6939() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6940() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6941() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6942() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6943() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6944() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6945() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6946() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6947() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6948() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6949() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6950() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6951() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6952() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6953() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6954() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6955() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6956() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6957() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6958() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6959() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6960() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6961() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6962() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6963() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6964() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6965() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6966() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6967() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6968() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6969() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6970() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6971() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6972() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6973() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6974() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6975() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6976() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6977() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6978() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6979() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6980() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6981() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6982() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6983() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6984() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6985() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6986() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6987() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6988() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6989() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6990() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6991() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6992() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6993() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6994() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6995() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6996() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6997() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6998() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test6999() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7000() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(1,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test7438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(2,a[5].intValue());
	}

	public void test7444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(2,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7542() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7543() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7544() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7545() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7546() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7547() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7548() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7549() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7550() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7551() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7552() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7553() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7554() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7555() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7556() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7557() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7558() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7559() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7560() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7561() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7562() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7563() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7564() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7565() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7566() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7567() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7568() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7569() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7570() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7571() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7572() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7573() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7574() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7575() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7576() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7577() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7578() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7579() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7580() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7581() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7582() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7583() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7584() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7585() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7586() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7587() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7588() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7589() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7590() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7591() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7592() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7593() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7594() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7595() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7596() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7597() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7598() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7599() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7600() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7601() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7602() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7603() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7604() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7605() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7606() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7607() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7608() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7609() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7610() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7611() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7612() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7613() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7614() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7615() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7616() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7617() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7618() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7619() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7620() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7621() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7622() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7623() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7624() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7625() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7626() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7627() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7628() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7629() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7630() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7631() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7632() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7633() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7634() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7635() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7636() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7637() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7638() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7639() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7640() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7641() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7642() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7643() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7644() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7645() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7646() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7647() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7648() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7649() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7650() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7651() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7652() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7653() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(2,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7654() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7655() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7656() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7657() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7658() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7659() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7660() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7661() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7662() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7663() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7664() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7665() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7666() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7667() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7668() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7669() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7670() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7671() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7672() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7673() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7674() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7675() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7676() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7677() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7678() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7679() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7680() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7681() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7682() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7683() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7684() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7685() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7686() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7687() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7688() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7689() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7690() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7691() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7692() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7693() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7694() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7695() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7696() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7697() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7698() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7699() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7700() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7701() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7702() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7703() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7704() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7705() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7706() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7707() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7708() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7709() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7710() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7711() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7712() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7713() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test7714() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7715() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7716() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7717() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7718() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7719() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7720() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7721() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7722() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7723() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7724() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7725() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7726() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7727() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7728() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7729() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7730() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7731() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7732() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7733() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7734() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7735() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7736() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7737() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7738() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7739() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7740() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7741() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7742() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7743() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7744() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7745() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7746() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7747() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7748() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7749() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7750() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7751() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7752() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7753() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7754() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7755() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7756() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7757() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7758() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7759() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7760() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7761() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7762() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7763() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7764() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7765() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7766() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7767() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7768() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7769() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7770() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7771() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7772() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7773() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7774() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7775() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7776() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7777() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7778() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7779() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7780() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7781() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7782() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7783() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7784() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7785() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7786() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7787() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7788() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7789() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7790() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7791() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7792() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7793() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7794() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7795() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7796() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7797() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7798() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7799() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7800() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7801() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7802() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7803() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7804() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7805() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7806() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7807() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7808() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7809() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7810() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7811() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7812() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7813() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7814() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7815() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7816() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7817() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7818() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7819() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7820() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7821() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7822() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7823() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7824() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7825() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7826() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7827() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7828() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7829() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7830() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7831() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7832() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7833() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7834() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7835() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7836() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7837() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7838() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7839() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7840() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7841() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7842() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7843() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7844() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7845() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7846() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7847() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7848() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7849() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7850() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7851() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7852() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7853() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7854() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7855() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7856() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7857() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7858() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7859() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7860() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7861() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7862() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7863() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7864() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7865() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7866() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7867() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7868() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7869() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7870() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7871() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7872() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7873() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7874() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7875() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7876() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7877() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7878() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7879() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7880() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7881() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7882() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7883() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7884() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7885() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7886() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7887() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7888() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7889() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7890() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7891() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7892() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7893() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7894() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7895() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7896() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7897() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7898() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7899() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7900() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7901() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7902() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7903() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7904() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7905() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7906() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7907() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7908() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7909() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7910() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7911() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7912() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7913() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7914() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7915() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7916() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7917() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7918() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7919() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7920() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7921() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7922() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7923() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7924() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7925() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7926() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7927() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7928() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7929() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7930() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7931() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7932() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7933() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7934() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7935() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7936() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7937() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7938() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7939() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7940() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7941() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7942() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7943() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7944() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7945() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7946() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7947() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7948() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7949() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7950() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7951() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7952() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7953() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7954() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7955() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7956() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7957() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7958() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7959() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7960() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7961() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7962() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7963() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7964() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7965() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7966() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7967() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7968() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7969() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7970() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7971() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7972() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7973() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7974() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7975() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7976() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7977() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7978() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7979() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7980() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7981() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7982() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7983() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7984() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7985() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7986() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7987() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7988() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7989() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7990() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7991() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7992() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7993() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7994() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7995() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7996() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7997() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7998() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test7999() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8000() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(2,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(3,a[5].intValue());
	}

	public void test8464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8542() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8543() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8544() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8545() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8546() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8547() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8548() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8549() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8550() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8551() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8552() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8553() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8554() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8555() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8556() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8557() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8558() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8559() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8560() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8561() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8562() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8563() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8564() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8565() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8566() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8567() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8568() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8569() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8570() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8571() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8572() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8573() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8574() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8575() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8576() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8577() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8578() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8579() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8580() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8581() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8582() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8583() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(3,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8584() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8585() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8586() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8587() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8588() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8589() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8590() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8591() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8592() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8593() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8594() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8595() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8596() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8597() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8598() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8599() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8600() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8601() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8602() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8603() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8604() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8605() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8606() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8607() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8608() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8609() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8610() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8611() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8612() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8613() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8614() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8615() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8616() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8617() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8618() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8619() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8620() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8621() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8622() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8623() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8624() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8625() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8626() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8627() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8628() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8629() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8630() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8631() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8632() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8633() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8634() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8635() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8636() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8637() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8638() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8639() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8640() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8641() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8642() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8643() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8644() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8645() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8646() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8647() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8648() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8649() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8650() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8651() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8652() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8653() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8654() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8655() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8656() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8657() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8658() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8659() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8660() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8661() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8662() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8663() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8664() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8665() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8666() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8667() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8668() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8669() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8670() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8671() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8672() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8673() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8674() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8675() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8676() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8677() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8678() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8679() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8680() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8681() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8682() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8683() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8684() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8685() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8686() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8687() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8688() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8689() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8690() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8691() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8692() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8693() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8694() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8695() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8696() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8697() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8698() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8699() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8700() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8701() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8702() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8703() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8704() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8705() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8706() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8707() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8708() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8709() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8710() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8711() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8712() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8713() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8714() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8715() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8716() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8717() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8718() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8719() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8720() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8721() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8722() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8723() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8724() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8725() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8726() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8727() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8728() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8729() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8730() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8731() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8732() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8733() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8734() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8735() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8736() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8737() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8738() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8739() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8740() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8741() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8742() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8743() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8744() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8745() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8746() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8747() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8748() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8749() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8750() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8751() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8752() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8753() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8754() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8755() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8756() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8757() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8758() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8759() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8760() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8761() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8762() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8763() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test8764() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8765() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8766() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8767() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8768() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8769() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8770() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8771() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8772() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8773() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8774() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8775() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8776() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8777() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8778() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8779() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8780() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8781() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8782() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8783() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8784() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8785() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8786() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8787() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8788() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8789() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8790() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8791() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8792() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8793() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8794() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8795() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8796() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8797() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8798() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8799() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8800() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8801() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8802() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8803() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8804() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8805() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8806() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8807() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8808() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8809() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8810() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8811() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8812() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8813() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8814() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8815() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8816() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8817() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8818() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8819() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8820() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8821() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8822() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8823() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8824() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8825() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8826() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8827() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8828() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8829() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8830() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8831() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8832() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8833() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8834() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8835() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8836() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8837() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8838() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8839() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8840() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8841() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8842() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8843() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8844() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8845() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8846() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8847() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8848() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8849() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8850() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8851() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8852() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8853() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8854() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8855() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8856() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8857() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8858() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8859() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8860() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8861() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8862() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8863() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8864() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8865() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8866() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8867() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8868() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8869() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8870() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8871() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8872() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8873() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8874() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8875() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8876() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8877() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8878() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8879() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8880() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8881() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8882() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8883() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8884() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8885() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8886() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8887() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8888() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8889() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8890() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8891() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8892() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8893() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8894() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8895() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8896() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8897() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8898() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8899() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8900() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8901() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8902() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8903() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8904() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8905() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8906() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8907() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8908() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8909() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8910() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8911() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8912() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8913() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8914() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8915() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8916() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8917() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8918() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8919() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8920() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8921() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8922() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8923() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8924() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8925() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8926() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8927() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8928() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8929() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8930() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8931() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8932() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8933() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8934() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8935() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8936() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8937() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8938() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8939() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8940() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8941() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8942() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8943() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8944() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8945() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8946() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8947() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8948() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8949() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8950() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8951() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8952() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8953() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8954() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8955() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8956() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8957() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8958() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8959() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8960() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8961() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8962() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8963() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8964() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8965() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8966() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8967() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8968() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8969() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8970() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8971() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8972() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8973() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8974() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8975() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8976() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8977() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8978() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8979() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8980() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8981() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8982() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8983() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8984() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8985() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8986() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8987() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8988() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8989() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8990() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8991() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8992() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8993() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8994() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8995() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8996() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8997() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8998() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test8999() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9000() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(3,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(4,a[5].intValue());
	}

	public void test9244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9542() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9543() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9544() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9545() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9546() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9547() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9548() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9549() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9550() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9551() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9552() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9553() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9554() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9555() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9556() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9557() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9558() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9559() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9560() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9561() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9562() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9563() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9564() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9565() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9566() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9567() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9568() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9569() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9570() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9571() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9572() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9573() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9574() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9575() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9576() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9577() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9578() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9579() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9580() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9581() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9582() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9583() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9584() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9585() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9586() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9587() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9588() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9589() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9590() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9591() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9592() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9593() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9594() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9595() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9596() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9597() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9598() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9599() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9600() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9601() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9602() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9603() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(4,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9604() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9605() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9606() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9607() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9608() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9609() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9610() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9611() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9612() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9613() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9614() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9615() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9616() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9617() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9618() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9619() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9620() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9621() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9622() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9623() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9624() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9625() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9626() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9627() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9628() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9629() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9630() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9631() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9632() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9633() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9634() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9635() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9636() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9637() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9638() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9639() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9640() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9641() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9642() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9643() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9644() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9645() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9646() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9647() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9648() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9649() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9650() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9651() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9652() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9653() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9654() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9655() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9656() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9657() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9658() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9659() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9660() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9661() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9662() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9663() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9664() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9665() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9666() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9667() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9668() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9669() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9670() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9671() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9672() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9673() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9674() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9675() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9676() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9677() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9678() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9679() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9680() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9681() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9682() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9683() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9684() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9685() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9686() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9687() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9688() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9689() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9690() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9691() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9692() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9693() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9694() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9695() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9696() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9697() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9698() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9699() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9700() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9701() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9702() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9703() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9704() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9705() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9706() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9707() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9708() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9709() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9710() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9711() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9712() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9713() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9714() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9715() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9716() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9717() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9718() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9719() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9720() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9721() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9722() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9723() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9724() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9725() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9726() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9727() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9728() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9729() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9730() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9731() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9732() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9733() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9734() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9735() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9736() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9737() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9738() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9739() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9740() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9741() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9742() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9743() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9744() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9745() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9746() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9747() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9748() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9749() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9750() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9751() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9752() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9753() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9754() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9755() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9756() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9757() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9758() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9759() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9760() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9761() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9762() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9763() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9764() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9765() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9766() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9767() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9768() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9769() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9770() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9771() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9772() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9773() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9774() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9775() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9776() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9777() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9778() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9779() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9780() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9781() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9782() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9783() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9784() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9785() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9786() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9787() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9788() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9789() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9790() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9791() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9792() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9793() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9794() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9795() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9796() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9797() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9798() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9799() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9800() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9801() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9802() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9803() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9804() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9805() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9806() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9807() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9808() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9809() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9810() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9811() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9812() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9813() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9814() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9815() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9816() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9817() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9818() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9819() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9820() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9821() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9822() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9823() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9824() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9825() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9826() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9827() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9828() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9829() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9830() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9831() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9832() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9833() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9834() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9835() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9836() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9837() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9838() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9839() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9840() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9841() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9842() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9843() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9844() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9845() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9846() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9847() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9848() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9849() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9850() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9851() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9852() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9853() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9854() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9855() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9856() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9857() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9858() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9859() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9860() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9861() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9862() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9863() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9864() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9865() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9866() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9867() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9868() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9869() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9870() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9871() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9872() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9873() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9874() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9875() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9876() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9877() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9878() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9879() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9880() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9881() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9882() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9883() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9884() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9885() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9886() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9887() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9888() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9889() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9890() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9891() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9892() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9893() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9894() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9895() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9896() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9897() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9898() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9899() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9900() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9901() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9902() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9903() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9904() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9905() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9906() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9907() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9908() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9909() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9910() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9911() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9912() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9913() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9914() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9915() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9916() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9917() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9918() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9919() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9920() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9921() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9922() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9923() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9924() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9925() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9926() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9927() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9928() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9929() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9930() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9931() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9932() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9933() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9934() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9935() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9936() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9937() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9938() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9939() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9940() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9941() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9942() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9943() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9944() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9945() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9946() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9947() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9948() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9949() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9950() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9951() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9952() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9953() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9954() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9955() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9956() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9957() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9958() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9959() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9960() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9961() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9962() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9963() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(5,a[5].intValue());
	}

	public void test9964() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9965() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9966() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9967() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9968() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9969() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9970() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9971() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9972() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9973() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9974() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9975() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9976() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9977() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9978() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9979() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9980() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9981() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9982() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9983() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9984() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9985() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9986() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9987() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,5,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9988() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9989() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9990() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9991() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9992() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9993() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9994() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9995() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9996() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9997() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9998() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test9999() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10000() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10001() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10002() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10003() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10004() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10005() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10006() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10007() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10008() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10009() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10010() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10011() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,2,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10012() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10013() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10014() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10015() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10016() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10017() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10018() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10019() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10020() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10021() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10022() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10023() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10024() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10025() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10026() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10027() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10028() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10029() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10030() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10031() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10032() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10033() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10034() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10035() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,3,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10036() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10037() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10038() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10039() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10040() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10041() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10042() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10043() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10044() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10045() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10046() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10047() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10048() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10049() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10050() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10051() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10052() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10053() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10054() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10055() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10056() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10057() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10058() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10059() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,4,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10060() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10061() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10062() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10063() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10064() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10065() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10066() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10067() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10068() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10069() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10070() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10071() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10072() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10073() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10074() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10075() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10076() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10077() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10078() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10079() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10080() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10081() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10082() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10083() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,1,6,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10084() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10085() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10086() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10087() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10088() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10089() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,4,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10090() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10091() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10092() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10093() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10094() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10095() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,3,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10096() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10097() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10098() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10099() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10100() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10101() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,2,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10102() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10103() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10104() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10105() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10106() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10107() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,6,1,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10108() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10109() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10110() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10111() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10112() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10113() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,6,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10114() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10115() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10116() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10117() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10118() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10119() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,4,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10120() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10121() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10122() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10123() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10124() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10125() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,3,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10126() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10127() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10128() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10129() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10130() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10131() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,1,2,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10132() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10133() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10134() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10135() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10136() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10137() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,1,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10138() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10139() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10140() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10141() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10142() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10143() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,6,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10144() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10145() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10146() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10147() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10148() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10149() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,4,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10150() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10151() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10152() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10153() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10154() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10155() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,2,3,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10156() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10157() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10158() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10159() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10160() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10161() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,2,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10162() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10163() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10164() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10165() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10166() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10167() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,1,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10168() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10169() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10170() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10171() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10172() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10173() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,6,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10174() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10175() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10176() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10177() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10178() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10179() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,3,4,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10180() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10181() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10182() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10183() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10184() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10185() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,3,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10186() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10187() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10188() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10189() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10190() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10191() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,2,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10192() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10193() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10194() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10195() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10196() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10197() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,1,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10198() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10199() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10200() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10201() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10202() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10203() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,4,6,5,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10204() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10205() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10206() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10207() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10208() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10209() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,4,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10210() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10211() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10212() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10213() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10214() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10215() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,3,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10216() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10217() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10218() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10219() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10220() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10221() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,5,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10222() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10223() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10224() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10225() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10226() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10227() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,1,6,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10228() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10229() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10230() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10231() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10232() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10233() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,1,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10234() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10235() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10236() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10237() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10238() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10239() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,4,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10240() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10241() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10242() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10243() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10244() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10245() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,3,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10246() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,3,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10247() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,3,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10248() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,4,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10249() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,4,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10250() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,1,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10251() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,1,6,5,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10252() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10253() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10254() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10255() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10256() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10257() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,6,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10258() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10259() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10260() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10261() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10262() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10263() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,1,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10264() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10265() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10266() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10267() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10268() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10269() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,4,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10270() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10271() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10272() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10273() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10274() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10275() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,5,3,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10276() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10277() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10278() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10279() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10280() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10281() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,5,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10282() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10283() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10284() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10285() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10286() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10287() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,6,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10288() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10289() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10290() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10291() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10292() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10293() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,1,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10294() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10295() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10296() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10297() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10298() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10299() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,3,4,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10300() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10301() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10302() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10303() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10304() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10305() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,3,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10306() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10307() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10308() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10309() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10310() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10311() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,5,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10312() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10313() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10314() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10315() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10316() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10317() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,6,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10318() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10319() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10320() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10321() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10322() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10323() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,4,1,2,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10324() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10325() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10326() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10327() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10328() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10329() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,4,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10330() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10331() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10332() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10333() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10334() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10335() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,2,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10336() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10337() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10338() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10339() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10340() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10341() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,5,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10342() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10343() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10344() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10345() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10346() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10347() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,6,1,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10348() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10349() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10350() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10351() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10352() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10353() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,6,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10354() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10355() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10356() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10357() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10358() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10359() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,4,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10360() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10361() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10362() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10363() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10364() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10365() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,2,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10366() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10367() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10368() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10369() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10370() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10371() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,1,5,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10372() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10373() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10374() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10375() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10376() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10377() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,1,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10378() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10379() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10380() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10381() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10382() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10383() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,6,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10384() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10385() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10386() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10387() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10388() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10389() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,4,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10390() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10391() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,4,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10392() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,6,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10393() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,6,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10394() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10395() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,1,5,2,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10396() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10397() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10398() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10399() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10400() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10401() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,5,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10402() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10403() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10404() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10405() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10406() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10407() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,1,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10408() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10409() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10410() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10411() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10412() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10413() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,6,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10414() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10415() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10416() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10417() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10418() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10419() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,2,4,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10420() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,5,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10421() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,5,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10422() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,1,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10423() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,1,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10424() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,4,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10425() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,4,2,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10426() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,4,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10427() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,4,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10428() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,1,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10429() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,1,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10430() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,4,2,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10431() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,1,2,5,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10432() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10433() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10434() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10435() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10436() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10437() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,1,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10438() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10439() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10440() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10441() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10442() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10443() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,4,6,3,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10444() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10445() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10446() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10447() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10448() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10449() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,3,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10450() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10451() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10452() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10453() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10454() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10455() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,2,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10456() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10457() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10458() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10459() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10460() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10461() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,5,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10462() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10463() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10464() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10465() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10466() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10467() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,1,6,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10468() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10469() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10470() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10471() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10472() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10473() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,1,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10474() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10475() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10476() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10477() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10478() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10479() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,3,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10480() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10481() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10482() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10483() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10484() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10485() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,2,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10486() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,2,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10487() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,2,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10488() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,3,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10489() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,3,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10490() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,1,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10491() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,1,6,5,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10492() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,1,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10493() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,1,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10494() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,3,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10495() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,3,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10496() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,5,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10497() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,5,6,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10498() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10499() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10500() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10501() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10502() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10503() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,1,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10504() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10505() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10506() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10507() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10508() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10509() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,3,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10510() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10511() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,3,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10512() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10513() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,1,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10514() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,3,6,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10515() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,1,6,5,2,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10516() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,6,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10517() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,6,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10518() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10519() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,1,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10520() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10521() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,2,5,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10522() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,2,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10523() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,2,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10524() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,1,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10525() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,1,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10526() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,2,5,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10527() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,1,5,6,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10528() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10529() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10530() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10531() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10532() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10533() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,1,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10534() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10535() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,1,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10536() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,5,6,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10537() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,1,6,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10538() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,1,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10539() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{1,6,5,2,3,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10540() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10541() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10542() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10543() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10544() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10545() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,2,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10546() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10547() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10548() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10549() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10550() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10551() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,5,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10552() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10553() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10554() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10555() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10556() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10557() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,6,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10558() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10559() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10560() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10561() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10562() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10563() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,3,1,4,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10564() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10565() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10566() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10567() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10568() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10569() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,3,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10570() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10571() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10572() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10573() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10574() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10575() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,2,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10576() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10577() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10578() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10579() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10580() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10581() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,5,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10582() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10583() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10584() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10585() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10586() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10587() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,6,4,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10588() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10589() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10590() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10591() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10592() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10593() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,6,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10594() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10595() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10596() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10597() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10598() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10599() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,3,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10600() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10601() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10602() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10603() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10604() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10605() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,2,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10606() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10607() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,2,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10608() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10609() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,3,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10610() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,6,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10611() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,6,4,5,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10612() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,6,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10613() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,6,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10614() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10615() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,3,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10616() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10617() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,5,4,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10618() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10619() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10620() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10621() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10622() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10623() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,6,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10624() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10625() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10626() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10627() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10628() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10629() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,3,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10630() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10631() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,3,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10632() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,6,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10633() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,6,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10634() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,3,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10635() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,6,4,5,2,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10636() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10637() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,4,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10638() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,6,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10639() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,6,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10640() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10641() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,2,5,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10642() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10643() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,2,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10644() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,6,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10645() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,6,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10646() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,2,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10647() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,6,5,4,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10648() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10649() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10650() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10651() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10652() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10653() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,6,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10654() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,6,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10655() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,6,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10656() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,5,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10657() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,6,4,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10658() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,6,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10659() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{6,4,5,2,3,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10660() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,5,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10661() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,5,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10662() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,4,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10663() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,4,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10664() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,3,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10665() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,3,2,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10666() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,3,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10667() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,3,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10668() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,4,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10669() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,4,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10670() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,3,2,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10671() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,4,2,5,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10672() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,5,2,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10673() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,3,2,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10674() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,3,5,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10675() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{3,2,5,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10676() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,3,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10677() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,3,4,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10678() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,5,4,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10679() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,2,4,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10680() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,2,5,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10681() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{2,4,5,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10682() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{5,4,2,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

	public void test10683() {
		qsort = new Quicksort<>(Comparator.<Integer>naturalOrder());
		Integer[] a = new Integer[]{4,5,2,3,6,1,};
		qsort.sort(a);
		assertEquals(1,a[0].intValue());
		assertEquals(2,a[1].intValue());
		assertEquals(3,a[2].intValue());
		assertEquals(4,a[3].intValue());
		assertEquals(5,a[4].intValue());
		assertEquals(6,a[5].intValue());
	}

}
